// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFeeds(t *testing.T) {
	t.Parallel()

	query := Feeds()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFeedsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feed{}
	if err = randomize.Struct(seed, o, feedDBTypes, true, feedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Feeds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFeedsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feed{}
	if err = randomize.Struct(seed, o, feedDBTypes, true, feedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Feeds().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Feeds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFeedsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feed{}
	if err = randomize.Struct(seed, o, feedDBTypes, true, feedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FeedSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Feeds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFeedsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feed{}
	if err = randomize.Struct(seed, o, feedDBTypes, true, feedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FeedExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Feed exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FeedExists to return true, but got false.")
	}
}

func testFeedsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feed{}
	if err = randomize.Struct(seed, o, feedDBTypes, true, feedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	feedFound, err := FindFeed(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if feedFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFeedsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feed{}
	if err = randomize.Struct(seed, o, feedDBTypes, true, feedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Feeds().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFeedsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feed{}
	if err = randomize.Struct(seed, o, feedDBTypes, true, feedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Feeds().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFeedsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	feedOne := &Feed{}
	feedTwo := &Feed{}
	if err = randomize.Struct(seed, feedOne, feedDBTypes, false, feedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feed struct: %s", err)
	}
	if err = randomize.Struct(seed, feedTwo, feedDBTypes, false, feedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = feedOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = feedTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Feeds().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFeedsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	feedOne := &Feed{}
	feedTwo := &Feed{}
	if err = randomize.Struct(seed, feedOne, feedDBTypes, false, feedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feed struct: %s", err)
	}
	if err = randomize.Struct(seed, feedTwo, feedDBTypes, false, feedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = feedOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = feedTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Feeds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func feedBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Feed) error {
	*o = Feed{}
	return nil
}

func feedAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Feed) error {
	*o = Feed{}
	return nil
}

func feedAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Feed) error {
	*o = Feed{}
	return nil
}

func feedBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Feed) error {
	*o = Feed{}
	return nil
}

func feedAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Feed) error {
	*o = Feed{}
	return nil
}

func feedBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Feed) error {
	*o = Feed{}
	return nil
}

func feedAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Feed) error {
	*o = Feed{}
	return nil
}

func feedBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Feed) error {
	*o = Feed{}
	return nil
}

func feedAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Feed) error {
	*o = Feed{}
	return nil
}

func testFeedsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Feed{}
	o := &Feed{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, feedDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Feed object: %s", err)
	}

	AddFeedHook(boil.BeforeInsertHook, feedBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	feedBeforeInsertHooks = []FeedHook{}

	AddFeedHook(boil.AfterInsertHook, feedAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	feedAfterInsertHooks = []FeedHook{}

	AddFeedHook(boil.AfterSelectHook, feedAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	feedAfterSelectHooks = []FeedHook{}

	AddFeedHook(boil.BeforeUpdateHook, feedBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	feedBeforeUpdateHooks = []FeedHook{}

	AddFeedHook(boil.AfterUpdateHook, feedAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	feedAfterUpdateHooks = []FeedHook{}

	AddFeedHook(boil.BeforeDeleteHook, feedBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	feedBeforeDeleteHooks = []FeedHook{}

	AddFeedHook(boil.AfterDeleteHook, feedAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	feedAfterDeleteHooks = []FeedHook{}

	AddFeedHook(boil.BeforeUpsertHook, feedBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	feedBeforeUpsertHooks = []FeedHook{}

	AddFeedHook(boil.AfterUpsertHook, feedAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	feedAfterUpsertHooks = []FeedHook{}
}

func testFeedsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feed{}
	if err = randomize.Struct(seed, o, feedDBTypes, true, feedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Feeds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFeedsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feed{}
	if err = randomize.Struct(seed, o, feedDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Feed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(feedColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Feeds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFeedsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feed{}
	if err = randomize.Struct(seed, o, feedDBTypes, true, feedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFeedsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feed{}
	if err = randomize.Struct(seed, o, feedDBTypes, true, feedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FeedSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFeedsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feed{}
	if err = randomize.Struct(seed, o, feedDBTypes, true, feedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Feeds().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	feedDBTypes = map[string]string{`ID`: `bigint`, `SourceID`: `bigint`, `URL`: `varchar`, `Title`: `varchar`, `Contents`: `text`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`, `ImageURL`: `text`}
	_           = bytes.MinRead
)

func testFeedsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(feedPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(feedAllColumns) == len(feedPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Feed{}
	if err = randomize.Struct(seed, o, feedDBTypes, true, feedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Feeds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, feedDBTypes, true, feedPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Feed struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFeedsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(feedAllColumns) == len(feedPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Feed{}
	if err = randomize.Struct(seed, o, feedDBTypes, true, feedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Feeds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, feedDBTypes, true, feedPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Feed struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(feedAllColumns, feedPrimaryKeyColumns) {
		fields = feedAllColumns
	} else {
		fields = strmangle.SetComplement(
			feedAllColumns,
			feedPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FeedSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFeedsUpsert(t *testing.T) {
	t.Parallel()

	if len(feedAllColumns) == len(feedPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLFeedUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Feed{}
	if err = randomize.Struct(seed, &o, feedDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Feed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Feed: %s", err)
	}

	count, err := Feeds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, feedDBTypes, false, feedPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Feed struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Feed: %s", err)
	}

	count, err = Feeds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
