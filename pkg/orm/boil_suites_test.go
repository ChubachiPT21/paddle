// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Feeds", testFeeds)
	t.Run("Interests", testInterests)
	t.Run("SchemaMigrations", testSchemaMigrations)
	t.Run("Sources", testSources)
	t.Run("Updates", testUpdates)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Feeds", testFeedsDelete)
	t.Run("Interests", testInterestsDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
	t.Run("Sources", testSourcesDelete)
	t.Run("Updates", testUpdatesDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Feeds", testFeedsQueryDeleteAll)
	t.Run("Interests", testInterestsQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
	t.Run("Sources", testSourcesQueryDeleteAll)
	t.Run("Updates", testUpdatesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Feeds", testFeedsSliceDeleteAll)
	t.Run("Interests", testInterestsSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
	t.Run("Sources", testSourcesSliceDeleteAll)
	t.Run("Updates", testUpdatesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Feeds", testFeedsExists)
	t.Run("Interests", testInterestsExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
	t.Run("Sources", testSourcesExists)
	t.Run("Updates", testUpdatesExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Feeds", testFeedsFind)
	t.Run("Interests", testInterestsFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
	t.Run("Sources", testSourcesFind)
	t.Run("Updates", testUpdatesFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Feeds", testFeedsBind)
	t.Run("Interests", testInterestsBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
	t.Run("Sources", testSourcesBind)
	t.Run("Updates", testUpdatesBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Feeds", testFeedsOne)
	t.Run("Interests", testInterestsOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
	t.Run("Sources", testSourcesOne)
	t.Run("Updates", testUpdatesOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Feeds", testFeedsAll)
	t.Run("Interests", testInterestsAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
	t.Run("Sources", testSourcesAll)
	t.Run("Updates", testUpdatesAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Feeds", testFeedsCount)
	t.Run("Interests", testInterestsCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
	t.Run("Sources", testSourcesCount)
	t.Run("Updates", testUpdatesCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Feeds", testFeedsHooks)
	t.Run("Interests", testInterestsHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
	t.Run("Sources", testSourcesHooks)
	t.Run("Updates", testUpdatesHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Feeds", testFeedsInsert)
	t.Run("Feeds", testFeedsInsertWhitelist)
	t.Run("Interests", testInterestsInsert)
	t.Run("Interests", testInterestsInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
	t.Run("Sources", testSourcesInsert)
	t.Run("Sources", testSourcesInsertWhitelist)
	t.Run("Updates", testUpdatesInsert)
	t.Run("Updates", testUpdatesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Feeds", testFeedsReload)
	t.Run("Interests", testInterestsReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
	t.Run("Sources", testSourcesReload)
	t.Run("Updates", testUpdatesReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Feeds", testFeedsReloadAll)
	t.Run("Interests", testInterestsReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
	t.Run("Sources", testSourcesReloadAll)
	t.Run("Updates", testUpdatesReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Feeds", testFeedsSelect)
	t.Run("Interests", testInterestsSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
	t.Run("Sources", testSourcesSelect)
	t.Run("Updates", testUpdatesSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Feeds", testFeedsUpdate)
	t.Run("Interests", testInterestsUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
	t.Run("Sources", testSourcesUpdate)
	t.Run("Updates", testUpdatesUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Feeds", testFeedsSliceUpdateAll)
	t.Run("Interests", testInterestsSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
	t.Run("Sources", testSourcesSliceUpdateAll)
	t.Run("Updates", testUpdatesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
