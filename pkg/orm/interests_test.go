// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testInterests(t *testing.T) {
	t.Parallel()

	query := Interests()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testInterestsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Interest{}
	if err = randomize.Struct(seed, o, interestDBTypes, true, interestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Interest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Interests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInterestsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Interest{}
	if err = randomize.Struct(seed, o, interestDBTypes, true, interestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Interest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Interests().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Interests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInterestsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Interest{}
	if err = randomize.Struct(seed, o, interestDBTypes, true, interestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Interest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InterestSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Interests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInterestsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Interest{}
	if err = randomize.Struct(seed, o, interestDBTypes, true, interestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Interest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := InterestExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Interest exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InterestExists to return true, but got false.")
	}
}

func testInterestsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Interest{}
	if err = randomize.Struct(seed, o, interestDBTypes, true, interestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Interest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	interestFound, err := FindInterest(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if interestFound == nil {
		t.Error("want a record, got nil")
	}
}

func testInterestsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Interest{}
	if err = randomize.Struct(seed, o, interestDBTypes, true, interestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Interest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Interests().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testInterestsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Interest{}
	if err = randomize.Struct(seed, o, interestDBTypes, true, interestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Interest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Interests().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInterestsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	interestOne := &Interest{}
	interestTwo := &Interest{}
	if err = randomize.Struct(seed, interestOne, interestDBTypes, false, interestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Interest struct: %s", err)
	}
	if err = randomize.Struct(seed, interestTwo, interestDBTypes, false, interestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Interest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = interestOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = interestTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Interests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInterestsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	interestOne := &Interest{}
	interestTwo := &Interest{}
	if err = randomize.Struct(seed, interestOne, interestDBTypes, false, interestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Interest struct: %s", err)
	}
	if err = randomize.Struct(seed, interestTwo, interestDBTypes, false, interestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Interest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = interestOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = interestTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Interests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func interestBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Interest) error {
	*o = Interest{}
	return nil
}

func interestAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Interest) error {
	*o = Interest{}
	return nil
}

func interestAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Interest) error {
	*o = Interest{}
	return nil
}

func interestBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Interest) error {
	*o = Interest{}
	return nil
}

func interestAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Interest) error {
	*o = Interest{}
	return nil
}

func interestBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Interest) error {
	*o = Interest{}
	return nil
}

func interestAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Interest) error {
	*o = Interest{}
	return nil
}

func interestBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Interest) error {
	*o = Interest{}
	return nil
}

func interestAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Interest) error {
	*o = Interest{}
	return nil
}

func testInterestsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Interest{}
	o := &Interest{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, interestDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Interest object: %s", err)
	}

	AddInterestHook(boil.BeforeInsertHook, interestBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	interestBeforeInsertHooks = []InterestHook{}

	AddInterestHook(boil.AfterInsertHook, interestAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	interestAfterInsertHooks = []InterestHook{}

	AddInterestHook(boil.AfterSelectHook, interestAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	interestAfterSelectHooks = []InterestHook{}

	AddInterestHook(boil.BeforeUpdateHook, interestBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	interestBeforeUpdateHooks = []InterestHook{}

	AddInterestHook(boil.AfterUpdateHook, interestAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	interestAfterUpdateHooks = []InterestHook{}

	AddInterestHook(boil.BeforeDeleteHook, interestBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	interestBeforeDeleteHooks = []InterestHook{}

	AddInterestHook(boil.AfterDeleteHook, interestAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	interestAfterDeleteHooks = []InterestHook{}

	AddInterestHook(boil.BeforeUpsertHook, interestBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	interestBeforeUpsertHooks = []InterestHook{}

	AddInterestHook(boil.AfterUpsertHook, interestAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	interestAfterUpsertHooks = []InterestHook{}
}

func testInterestsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Interest{}
	if err = randomize.Struct(seed, o, interestDBTypes, true, interestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Interest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Interests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInterestsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Interest{}
	if err = randomize.Struct(seed, o, interestDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Interest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(interestColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Interests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInterestsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Interest{}
	if err = randomize.Struct(seed, o, interestDBTypes, true, interestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Interest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInterestsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Interest{}
	if err = randomize.Struct(seed, o, interestDBTypes, true, interestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Interest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InterestSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInterestsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Interest{}
	if err = randomize.Struct(seed, o, interestDBTypes, true, interestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Interest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Interests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	interestDBTypes = map[string]string{`ID`: `bigint`, `FeedID`: `bigint`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_               = bytes.MinRead
)

func testInterestsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(interestPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(interestAllColumns) == len(interestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Interest{}
	if err = randomize.Struct(seed, o, interestDBTypes, true, interestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Interest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Interests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, interestDBTypes, true, interestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Interest struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testInterestsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(interestAllColumns) == len(interestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Interest{}
	if err = randomize.Struct(seed, o, interestDBTypes, true, interestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Interest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Interests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, interestDBTypes, true, interestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Interest struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(interestAllColumns, interestPrimaryKeyColumns) {
		fields = interestAllColumns
	} else {
		fields = strmangle.SetComplement(
			interestAllColumns,
			interestPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := InterestSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testInterestsUpsert(t *testing.T) {
	t.Parallel()

	if len(interestAllColumns) == len(interestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLInterestUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Interest{}
	if err = randomize.Struct(seed, &o, interestDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Interest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Interest: %s", err)
	}

	count, err := Interests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, interestDBTypes, false, interestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Interest struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Interest: %s", err)
	}

	count, err = Interests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
