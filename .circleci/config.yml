# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  aws-s3: circleci/aws-s3@1.0.16

jobs:
  lint:
    docker:
      - image: cimg/node:14.16.1
    working_directory: ~/repo
    parameters:
      commit_key_fingerprint:
        type: string
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - << parameters.commit_key_fingerprint >>
      - restore_cache:
          key: v1-node-{{ checksum "./web/yarn.lock" }}
      - run:
          name: Execute Lintfix
          command: |
            cd web && yarn install
            yarn lintfix
            if [[ ! -z "$(git status --porcelain)" ]]; then
              git config user.email "chubachi+pt+circleci@users.noreply.github.com"
              git config user.name "chubachi+pt+circleci"
              git add .
              ssh-keyscan github.com > ~/.ssh/known_hosts
              git commit -m "[skip ci] lintfix"
              git push --set-upstream origin ${CIRCLE_BRANCH}
            fi
      - save_cache:
          key: v1-node-{{ checksum "./web/yarn.lock" }}
          paths:
            - ./web/node_modules
      - run:
          name: Execute Lint
          command: |
            cd web
            yarn lint
  frontend-test:
    docker:
      - image: cimg/node:14.16.1
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          key: v1-node-{{ checksum "./web/yarn.lock" }}
      - run: cd web && yarn install
      - save_cache:
          key: v1-node-{{ checksum "./web/yarn.lock" }}
          paths:
            - ./web/node_modules
      - run: cd web && yarn test
  test:
    machine: true
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.29.1/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run:
          name: docker-compose build
          command: |
            set -x
            docker-compose build
          no_output_timeout: 20m
      - run:
          name: docker-compose up
          command: |
            set -x
            docker-compose up -d
          no_output_timeout: 20m
      - run:
          name: docker-compose stop
          command: |
            set -x
            docker-compose stop
      - run:
          name: docker-compose down
          command: docker-compose down
      - run:
          name: test
          command: |
            test_results_path=/tmp/test-results
            mkdir -p ${test_results_path}
            docker run -it --name go_test paddle_go go test -v ./internal/...
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
  api-deploy:
    machine: true
    working_directory: ~/repo
    parameters:
      connection_key_fingerprint:
        type: string
      deploy_key_fingerprint:
        type: string
    steps:
      - add_ssh_keys:
          fingerprints:
            - << parameters.connection_key_fingerprint >>
            - << parameters.deploy_key_fingerprint >>
      - run:
          name: Setup Deployment Key
          command: |
            CONNECTION_KEY_FINGERPRINT=<< parameters.connection_key_fingerprint >>
            DEPLOY_KEY_FINGERPRINT=<< parameters.deploy_key_fingerprint >>
            scp -P ${SSH_PORT} -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa_${CONNECTION_KEY_FINGERPRINT//:/} ~/.ssh/id_rsa_${DEPLOY_KEY_FINGERPRINT//:/} ${USERNAME}@${HOST}:/home/${USERNAME}/.ssh/id_rsa
      - run:
          name: Package Install
          command: |
            COMPOSE_PATH=/usr/local/bin/docker-compose
            ssh -p ${SSH_PORT} -o StrictHostKeyChecking=no ${USERNAME}@${HOST} \<< EOF
              sudo yum update -y && sudo yum install -y git docker
              if [[ ! -e ${COMPOSE_PATH} ]]; then
                sudo curl -L https://github.com/docker/compose/releases/download/1.29.1/docker-compose-`uname -s`-`uname -m` -o ${COMPOSE_PATH}
                sudo chmod +x ${COMPOSE_PATH}
                sudo ln -s ${COMPOSE_PATH} /usr/bin/docker-compose
              fi
              sudo systemctl start docker && sudo systemctl enable docker
              # 監視ファイル数の上限変更
              echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf
              sudo sysctl -p
            EOF
      - run:
          name: Service Deployment
          command: |
            GIT_PATH=/home/${USERNAME}/${CIRCLE_PROJECT_REPONAME}
            ssh -p ${SSH_PORT} -o StrictHostKeyChecking=no ${USERNAME}@${HOST} \<< EOF
              ssh-keyscan github.com > ~/.ssh/known_hosts
              if [[ ! -e ${GIT_PATH} ]]; then
                git clone ${CIRCLE_REPOSITORY_URL}
              fi
              cd ${GIT_PATH} && git checkout main && git pull
              sudo docker-compose stop && sudo docker-compose up -d
            EOF
  web-deploy:
    docker:
      - image: cimg/python:3.7.10-node
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          key: v1-node-{{ checksum "./web/yarn.lock" }}
      - run:
          name: Web Build
          command: |
            cd web && yarn install && yarn build
      - aws-s3/sync:
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400" \
            --delete
          from: ./web/build
          overwrite: true
          to: 's3://paddle.co.jp'
      - save_cache:
          key: v1-node-{{ checksum "./web/yarn.lock" }}
          paths:
            - ./web/node_modules

workflows:
  test:
    jobs:
      - lint:
          commit_key_fingerprint: fa:da:78:fd:d7:ab:c3:8f:48:4c:ca:e7:2b:32:81:b6
          filters:
            branches:
              ignore:
                - main
      - test:
          requires:
            - lint
          filters:
            branches:
              ignore:
                - main
  test-and-deploy:
    jobs:
      - test:
          filters:
            branches:
              only:
                - main
      - api-deploy:
          connection_key_fingerprint: 3b:67:c0:14:65:66:df:39:ac:ac:a8:e7:d9:73:d0:9c
          deploy_key_fingerprint: aa:04:58:74:f8:7b:56:f4:47:47:cb:42:ab:70:2a:c8
          requires:
            - test
          filters:
            branches:
              only:
                - main
      - web-deploy:
          requires:
            - test
          filters:
            branches:
              only:
                - main
