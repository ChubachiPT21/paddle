// Code generated by MockGen. DO NOT EDIT.
// Source: repository_interface.go

// Package mock_models is a generated GoMock package.
package models

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	gofeed "github.com/mmcdole/gofeed"
	orm "github.com/ChubachiPT21/paddle/pkg/orm"
)

// MockInterestRepository is a mock of InterestRepository interface.
type MockInterestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInterestRepositoryMockRecorder
}

// MockInterestRepositoryMockRecorder is the mock recorder for MockInterestRepository.
type MockInterestRepositoryMockRecorder struct {
	mock *MockInterestRepository
}

// NewMockInterestRepository creates a new mock instance.
func NewMockInterestRepository(ctrl *gomock.Controller) *MockInterestRepository {
	mock := &MockInterestRepository{ctrl: ctrl}
	mock.recorder = &MockInterestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterestRepository) EXPECT() *MockInterestRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInterestRepository) Create(feedID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", feedID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockInterestRepositoryMockRecorder) Create(feedID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInterestRepository)(nil).Create), feedID)
}

// MockFeedRepository is a mock of FeedRepository interface.
type MockFeedRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFeedRepositoryMockRecorder
}

// MockFeedRepositoryMockRecorder is the mock recorder for MockFeedRepository.
type MockFeedRepositoryMockRecorder struct {
	mock *MockFeedRepository
}

// NewMockFeedRepository creates a new mock instance.
func NewMockFeedRepository(ctrl *gomock.Controller) *MockFeedRepository {
	mock := &MockFeedRepository{ctrl: ctrl}
	mock.recorder = &MockFeedRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedRepository) EXPECT() *MockFeedRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockFeedRepository) All(sourceID int64) (orm.FeedSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", sourceID)
	ret0, _ := ret[0].(orm.FeedSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockFeedRepositoryMockRecorder) All(sourceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockFeedRepository)(nil).All), sourceID)
}

// Create mocks base method.
func (m *MockFeedRepository) Create(sourceID int64, item *gofeed.Item) (*orm.Feed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", sourceID, item)
	ret0, _ := ret[0].(*orm.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFeedRepositoryMockRecorder) Create(sourceID, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFeedRepository)(nil).Create), sourceID, item)
}

// MockSourceRepository is a mock of SourceRepository interface.
type MockSourceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSourceRepositoryMockRecorder
}

// MockSourceRepositoryMockRecorder is the mock recorder for MockSourceRepository.
type MockSourceRepositoryMockRecorder struct {
	mock *MockSourceRepository
}

// NewMockSourceRepository creates a new mock instance.
func NewMockSourceRepository(ctrl *gomock.Controller) *MockSourceRepository {
	mock := &MockSourceRepository{ctrl: ctrl}
	mock.recorder = &MockSourceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourceRepository) EXPECT() *MockSourceRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockSourceRepository) All() (orm.SourceSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].(orm.SourceSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockSourceRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockSourceRepository)(nil).All))
}

// Create mocks base method.
func (m *MockSourceRepository) Create(source *orm.Source) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", source)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSourceRepositoryMockRecorder) Create(source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSourceRepository)(nil).Create), source)
}

// Find mocks base method.
func (m *MockSourceRepository) Find(sourceID int64) (*orm.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", sourceID)
	ret0, _ := ret[0].(*orm.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockSourceRepositoryMockRecorder) Find(sourceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockSourceRepository)(nil).Find), sourceID)
}

// MockUpdateRepository is a mock of UpdateRepository interface.
type MockUpdateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateRepositoryMockRecorder
}

// MockUpdateRepositoryMockRecorder is the mock recorder for MockUpdateRepository.
type MockUpdateRepositoryMockRecorder struct {
	mock *MockUpdateRepository
}

// NewMockUpdateRepository creates a new mock instance.
func NewMockUpdateRepository(ctrl *gomock.Controller) *MockUpdateRepository {
	mock := &MockUpdateRepository{ctrl: ctrl}
	mock.recorder = &MockUpdateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateRepository) EXPECT() *MockUpdateRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUpdateRepository) Create(sourceID int64, fetchedAt time.Time) (*orm.Update, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", sourceID, fetchedAt)
	ret0, _ := ret[0].(*orm.Update)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUpdateRepositoryMockRecorder) Create(sourceID, fetchedAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUpdateRepository)(nil).Create), sourceID, fetchedAt)
}

// Find mocks base method.
func (m *MockUpdateRepository) Find(sourceID int64) (*orm.Update, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", sourceID)
	ret0, _ := ret[0].(*orm.Update)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockUpdateRepositoryMockRecorder) Find(sourceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUpdateRepository)(nil).Find), sourceID)
}

// Update mocks base method.
func (m *MockUpdateRepository) Update(update *orm.Update) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", update)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUpdateRepositoryMockRecorder) Update(update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUpdateRepository)(nil).Update), update)
}
